#!/bin/bash
#Matrix Application created by Daniel Rotenberg
#OSU344 - HW Assignment 1

tempCol="tempColFile"
tempRow="tempRowFile"


# Dims function should print the dimensions of the matrix as the number
# of rows, followed by a space, then the number of columns

dims() {
	# echo "The dimensions of that matrix is:"
	rowTotal=$(wc -l < $file)
	colTotal=$(head -1 $file | wc -w)
	echo -e "$rowTotal $colTotal"
	exit 0
}

if [ $1 = "dims" ]
	then
		if [ $# -gt 2 ] # if there are more than 2 command line arguments (function call + file)
			then
			echo "That is the incorrect number of arguments" >&2  #redirect message to stderr
			exit 1
		fi

		if [ ! -e $2 ]
			then
			echo -e "$2 does not exist" >&2 # tell user that the file doesn't exit and redirect stdout to stderr
			exit 1
		fi

		if [ $# -eq 2 ] # if there is the correct number of arguments (1) then run dims
			then
			file="$2"
		fi
	
        if [ $# -eq 1 ]
        then
		    file=$1
            cat > $file
        fi
	
	dims file 
fi

# Transpose function should reflect the elements of the matrix along the main diagonal.
# Thus, an MxN matrix will become an NxM matrix and the values along the main diagonal
# will remain unchanged.

transpose() {
	totalCol=$( head -1 $file | wc -w)	
	# echo "Total Cols: $totalCol"
	totalRows=$( wc -l < $file)
	# echo "Total Rows: $totalRows"
	i=1
	
	# appened each number onto the end of a temp column file
	while [[ $i -le totalCol ]]
	do
		cut -f $i $file > $tempCol
		cat $tempCol | tr '\n' '\t' >> $tempRow$$
		truncate -s-1 $tempRow$$
		echo >> $tempRow$$
		(( i++ ))
	done

	cat < $tempRow$$

#	while [[ $i -le totalCol ]]
#	do
#		cut -f $i $file >> $tempCol$$
#		(( i++ ))
#	done

	# convert column file back into row file
#	cat $tempCol$$ | tr '\n' '\t' > "$tempRow$$"
#	echo >> "$tempRow$$"
	rm -f $tempRow$$
	rm -f $tempCol	
	exit 0
}

if [ $1 = "transpose" ]
	then
		if [ $# -gt 2 ] # if there are more than 2 command line arguments (function call + file)
			then
			echo "That is the incorrect number of arguments" 1>&2 #redirect message to stderr
			exit 1
		fi

		if [ ! -e $2 ]
			then
			echo -e "$2 does not exist" 1>&2 # tell user that the file doesn't exit and redirect stdout to stderr
			exit 1
		fi

		if [ $# -eq 2 ] # if there is the correct number of arguments (1) then run dims
			then
			file="$2"
		fi
        
		if [ ! -r $2 ]
        then
			echo -e "$2 is not readable" 1>&2 # tell user that the file is not readable and exit and redirect stdout to stderr
        	exit 1
		fi

		transpose file
fi

# Mean function should take an MxN matrix and return a 1xN row vector, where the first 
# element is the mean of column one, the second element is the mean of column two, and so on.

# Add should take two MxN matrices and add them together element-wise to produce an MxN matrix.
# Add should return an error if the matrixes do not have the same dimensions.
add() {
	while
		read firstFileLine 0<&3
		read secondFileLine 0<&4
	do
		echo "$firstFileLine" | tr '\n' '\t' >> tmp1	# first file turned into 1 line
		echo "$secondFileLine" | tr '\n' '\t' >> tmp2	# seconod file turned into 1 line
	done 3<$1 4<$2

	echo >> "tmp1"
	echo >> "tmp2"

	cat "tmp1" >> "tmp2"	# combine output
	
	maxCols=$( head -1 tmp2 | wc -w)

	i=1
	colNum=1

	while [ $i -le $maxCols ]
	do
		sum=0
		cut -f $i "tmp2" > "tmp3"	#cut each column and move to new tmp file
		
		while read numInTmp3
		do
			sum=$(($sum + $numInTmp3)) #get the sum
		done < "tmp3"
	
		echo "$sum" | tr '\n' '\t' >> finalFile # store sum into one file
	#	echo "Sum = $sum"
		
		if [ $(( $i % $fileOneCols )) == 0 ]
			then
			truncate -s-1 finalFile
			echo >> finalFile
		fi

		(( i++ ))
		(( colNum++ ))
	done

	cat < finalFile

	rm -f tmp1
	rm -f tmp2
	rm -f tmp3
	rm -f finalFile

	exit 0 
}

if [ $1 = "add" ]
	then
		if [ $# -ne 3 ] # if there are more than 3 command line arguments (function call + file1 + file2)
			then
			echo "That is the incorrect number of arguments" 1>&2 #redirect message to stderr
			exit 1
		fi

		if [ ! -r $2 ] || [ ! -r $3 ]
			then
			echo "You inluded an unreadable file" >&2
			exit 1
		fi

		if [ $# -eq 3 ] # if there are the correct number of arguments
			then
			firstFile=$2
			secondFile=$3
		fi

		fileOneRows=$( wc -l < $firstFile)
		fileTwoRows=$( wc -l < $secondFile)
		fileOneCols=$( head -1 $firstFile | wc -w)
		fileTwoCols=$( head -1 $secondFile | wc -w)
	
	#	echo "f1r = $fileOneRows"
	#	echo "f2r = $fileTwoRows"
	#	echo "f1c = $fileOneCols"
	#	echo "f2c = $fileTwoCols"

		if [ $fileOneRows -ne $fileTwoRows ] || [ $fileOneCols -ne $fileTwoCols ]
			then
			echo "The dimensions of each matrix need to be the same" >&2
			exit 1
		fi

	add $firstFile $secondFile

fi

# Multiply should take an MxN and NxP matrix and produce an MxP matrix. Note that, unlike 
# addition, matrix multiplication is not communative. That is A*B != B*A.

$1 "${@:2}"
